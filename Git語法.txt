================基本控制===============

設定開始對某資料夾做版本控制
=> 先到達該資料夾的路徑  輸入: git init 

查看版本狀態
=> git status

將檔案設定為要加入版本控制
=> gut add 檔案名稱  或  git add .

將檔案取消版本控制
=> git rm --cached 檔案名稱

建立一個新版本
=> git commit -m "備註內容"

查看版本紀錄
=> git log

查看先前版本(或編輯先前版本)
=> git checkout 版本流水號

從先前版本回到最新版本
=> git checkout master

將檔案設定成永遠不做版本控制
=> touch .gitignore
=> vim .gitignore    輸入檔名   存檔離開

============Branch============

查看目前有哪些branch
=> git branch -v

開一條新的branch
=> git branch (branch_name)

刪除branch
=> git branch -d (branch_name)

切換不同的branch
=> git checkout (branch_name)

將別條branch合併進來
=> git merge (branch_name)

修改branch的名稱
=> git branch -m (new_branch_name)


=============GitHub============

將檔案同步到雲端
=> 先在GitHub新增一個new repo再依照說明將local端的資料夾連結

將檔案push上雲端
=> git push origin (branch_name)


將雲端檔案pull下來
=> git pull origin (branch_name)

將雲端repo複製下來
=> git clone (網址)

將雲端的branch複製下來
=> git checkout (遠端的branch_name)

=============其他==============

當commit message寫錯需要更正時
＝> git commit --amend (進入到vim去更正commit message)

當commit後又後悔不想commit了
=> git reset HEAD^ （--hard直接改回去上一次commit的內容 or --soft回到原本版本不動已修改的內容）
=> git reset 流水號

在commit前想復原修改過的檔案
=> git checkout -- 檔名

===========hook============
鉤子，可預設在commit時會自動依照指示做判斷
ex.內容有不合規範的指令，無法commit




